// 1. Multiples of 3 or 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.

function multiplesOf3and5(number) {
	let sum = 0;
	for (let i = 1; i < number; i++) {
		if (i % 3 === 0 || i % 5 === 0) {
			sum += i;
		}
	}
	return sum;
}

// console.log(multiplesOf3and5(1000));

// 2. Even Fibonacci numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

function fiboEvenSum(n) {
	let sum = 2;
	let num1 = 1;
	let num2 = 2;

	while (num1 + num2 <= n) {
		let num3 = num1 + num2;
		if (num3 % 2 === 0) {
			sum += num3;
		}
		num1 = num2;
		num2 = num3;
	}
	return sum;
}

// console.log(fiboEvenSum(4000000));

// 3. Largest Prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

function largestPrimeFactor(number) {
	let prime = 2;
	let max = 0;

	while (prime <= number) {
		if (number % prime === 0) {
			max = prime;
			number = number / prime;
		} else {
			prime += 1;
		}
	}

	return max;
}

// console.log(largestPrimeFactor(600851475143));

// Steps:
// Start prime equal to the smallest prime number
// Start a while loop - stop when number / prime is 1 (so while prime <= number)
// if prime is a factor of number, update max to prime and set number to number / prime
// else increment prime by 1

// 4. Largest Palindrome Product

function largestPalindromeProduct(n) {
	// let num = 9;
	// for (let i = 1; i < n; i++) {
	// 	num += "9";
	// }
	const num = Array(n).fill(9).join("");

	let largest = -Infinity;

	for (let i = num; i > 0; i--) {
		for (let j = num; j > 0; j--) {
			const product = i * j;
			if (isPalindrome(product) === true) {
				largest = Math.max(largest, product);
			}
		}
	}
	return largest;
}

function isPalindrome(n) {
	n = String(n);
	let l = 0;
	let r = n.length - 1;

	while (l <= r) {
		if (n[l] !== n[r]) {
			return false;
		} else {
			l += 1;
			r -= 1;
		}
	}
	return true;
}

// console.log(largestPalindromeProduct(4));

// 5. Smallest multiple

function smallestMult(n) {
	let num = n;
	let found = false;
	// console.log(num);

	while (!found) {
		if (isDivisible(num, n) === true) {
			found = true;
		} else {
			num += 1;
		}
	}
	// console.log(num)
	return num;
}

function isDivisible(num, n) {
	for (let i = 1; i <= n; i++) {
		if (num % i !== 0) {
			return false;
		}
	}
	return true;
}

// console.log(smallestMult(20));

// 6. Sum Square Difference
function sumSquareDifference(n) {
	let sumSquare = 0;
	let sum = 0;
	for (let i = 1; i <= n; i++) {
		sumSquare += i * i;
		sum += i;
	}

	return sum * sum - sumSquare;
}

console.log(sumSquareDifference(100));
